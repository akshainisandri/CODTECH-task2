import java.util.ArrayList;
import java.util.Scanner;

// Class representing a bank account
class BankAccount {
    private static int nextAccountNumber = 1001; // Account number generator
    private int accountNumber;
    private double balance;
    private ArrayList<Transaction> transactions;

    public BankAccount(double initialDeposit) {
        this.accountNumber = nextAccountNumber++;
        this.balance = initialDeposit;
        this.transactions = new ArrayList<>();
        addTransaction("Initial Deposit", initialDeposit);
    }

    public int getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            addTransaction("Deposit", amount);
            System.out.println("Deposit successful!");
        } else {
            System.out.println("Invalid deposit amount!");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            addTransaction("Withdraw", amount);
            System.out.println("Withdrawal successful!");
        } else {
            System.out.println("Invalid withdrawal amount or insufficient funds!");
        }
    }

    public boolean transfer(BankAccount targetAccount, double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            targetAccount.deposit(amount);
            addTransaction("Transfer to account #" + targetAccount.getAccountNumber(), amount);
            targetAccount.addTransaction("Transfer from account #" + this.accountNumber, amount);
            return true;
        } else {
            return false;
        }
    }

    private void addTransaction(String type, double amount) {
        transactions.add(new Transaction(type, amount, balance));
    }

    public void showTransactionHistory() {
        System.out.println("Transaction history for account #" + accountNumber + ":");
        for (Transaction t : transactions) {
            System.out.println(t);
        }
    }
}

// Class representing a transaction
class Transaction {
    private String type;
    private double amount;
    private double balanceAfterTransaction;

    public Transaction(String type, double amount, double balanceAfterTransaction) {
        this.type = type;
        this.amount = amount;
        this.balanceAfterTransaction = balanceAfterTransaction;
    }

    @Override
    public String toString() {
        return type + " of $" + amount + ", Balance after transaction: $" + balanceAfterTransaction;
    }
}

// Class representing a user
class User {
    private String name;
    private String email;
    private ArrayList<BankAccount> accounts;

    public User(String name, String email) {
        this.name = name;
        this.email = email;
        this.accounts = new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public void createAccount(double initialDeposit) {
        BankAccount newAccount = new BankAccount(initialDeposit);
        accounts.add(newAccount);
        System.out.println("Account created successfully! Account Number: " + newAccount.getAccountNumber());
    }

    public BankAccount getAccount(int accountNumber) {
        for (BankAccount account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                return account;
            }
        }
        return null;
    }

    public void showAccounts() {
        System.out.println(name + "'s Accounts:");
        for (BankAccount account : accounts) {
            System.out.println("Account #" + account.getAccountNumber() + " - Balance: $" + account.getBalance());
        }
    }
}

// Main class for the banking system
public class BankingSystem {
    private static ArrayList<User> users = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        boolean exit = false;

        while (!exit) {
            System.out.println("\n=== Online Banking System ===");
            System.out.println("1. Create a new user");
            System.out.println("2. Manage existing user");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    createUser();
                    break;
                case 2:
                    manageUser();
                    break;
                case 3:
                    exit = true;
                    System.out.println("Thank you for using the Online Banking System.");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    private static void createUser() {
        System.out.print("Enter your name: ");
        String name = scanner.nextLine();
        System.out.print("Enter your email: ");
        String email = scanner.nextLine();
        User user = new User(name, email);
        users.add(user);
        System.out.println("User created successfully!");
    }

    private static User findUser() {
        System.out.print("Enter user email: ");
        String email = scanner.nextLine();
        for (User user : users) {
            if (user.getEmail().equalsIgnoreCase(email)) {
                return user;
            }
        }
        System.out.println("User not found!");
        return null;
    }

    private static void manageUser() {
        User user = findUser();
        if (user != null) {
            boolean back = false;

            while (!back) {
                System.out.println("\nWelcome, " + user.getName() + "!");
                System.out.println("1. Create a new bank account");
                System.out.println("2. View accounts");
                System.out.println("3. Deposit funds");
                System.out.println("4. Withdraw funds");
                System.out.println("5. Transfer funds");
                System.out.println("6. View transaction history");
                System.out.println("7. Manage personal information");
                System.out.println("8. Back");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        System.out.print("Enter initial deposit amount: ");
                        double initialDeposit = scanner.nextDouble();
                        user.createAccount(initialDeposit);
                        break;
                    case 2:
                        user.showAccounts();
                        break;
                    case 3:
                        performDeposit(user);
                        break;
                    case 4:
                        performWithdrawal(user);
                        break;
                    case 5:
                        performTransfer(user);
                        break;
                    case 6:
                        viewTransactionHistory(user);
                        break;
                    case 7:
                        managePersonalInfo(user);
                        break;
                    case 8:
                        back = true;
                        break;
                    default:
                        System.out.println("Invalid choice! Please try again.");
                }
            }
        }
    }

    private static void performDeposit(User user) {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        BankAccount account = user.getAccount(accountNumber);

        if (account != null) {
            System.out.print("Enter deposit amount: ");
            double amount = scanner.nextDouble();
            account.deposit(amount);
        } else {
            System.out.println("Account not found!");
        }
    }

    private static void performWithdrawal(User user) {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        BankAccount account = user.getAccount(accountNumber);

        if (account != null) {
            System.out.print("Enter withdrawal amount: ");
            double amount = scanner.nextDouble();
            account.withdraw(amount);
        } else {
            System.out.println("Account not found!");
        }
    }

    private static void performTransfer(User user) {
        System.out.print("Enter your account number: ");
        int fromAccountNumber = scanner.nextInt();
        BankAccount fromAccount = user.getAccount(fromAccountNumber);

        if (fromAccount != null) {
            System.out.print("Enter recipient account number: ");
            int toAccountNumber = scanner.nextInt();

            BankAccount toAccount = null;
            for (User u : users) {
                toAccount = u.getAccount(toAccountNumber);
                if (toAccount != null) break;
            }

            if (toAccount != null) {
                System.out.print("Enter transfer amount: ");
                double amount = scanner.nextDouble();
                if (fromAccount.transfer(toAccount, amount)) {
                    System.out.println("Transfer successful!");
                } else {
                    System.out.println("Transfer failed! Insufficient funds or invalid amount.");
                }
            } else {
                System.out.println("Recipient account not found!");
            }
        } else {
            System.out.println("Your account not found!");
        }
    }

    private static void viewTransactionHistory(User user) {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        BankAccount account = user.getAccount(accountNumber);

        if (account != null) {
            account.showTransactionHistory();
        } else {
            System.out.println("Account not found!");
        }
    }

    private static void managePersonalInfo(User user) {
        System.out.println("1. Change name");
        System.out.println("2. Change email");
        System.out.print("Enter your choice: ");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        switch (choice) {
            case 1:
                System.out.print("Enter new name: ");
                String newName = scanner.nextLine();
                user.setName(newName);
                System.out.println("Name updated successfully!");
                break;
            case 2:
                System.out.print("Enter new email: ");
                String newEmail = scanner.nextLine();
                user.setEmail(newEmail);
                System.out.println("Email updated successfully!");
                break;
            default:
                System.out.println("Invalid choice!");
        }
    }
}
