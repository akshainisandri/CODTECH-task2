import java.util.ArrayList;
import java.util.Scanner;

// Class representing a bank account
class BankAccount {
    private static int nextAccountNumber = 1001; // Account number generator (starts from 1001)
    private int accountNumber; // Unique account number for each bank account
    private double balance; // Current balance of the account
    private ArrayList<Transaction> transactions; // List to store transaction history

    // Constructor for BankAccount that sets the initial balance and assigns an account number
    public BankAccount(double initialDeposit) {
        this.accountNumber = nextAccountNumber++; // Assign unique account number and increment the static variable
        this.balance = initialDeposit; // Set the initial deposit as the starting balance
        this.transactions = new ArrayList<>(); // Initialize the transaction history list
        addTransaction("Initial Deposit", initialDeposit); // Record the initial deposit in the transaction history
    }

    // Getter method to retrieve the account number
    public int getAccountNumber() {
        return accountNumber;
    }

    // Getter method to retrieve the account balance
    public double getBalance() {
        return balance;
    }

    // Method to deposit money into the account
    public void deposit(double amount) {
        if (amount > 0) { // Ensure deposit amount is positive
            balance += amount; // Increase balance by the deposit amount
            addTransaction("Deposit", amount); // Record the deposit in the transaction history
            System.out.println("Deposit successful!");
        } else {
            System.out.println("Invalid deposit amount!"); // Handle invalid deposit amounts
        }
    }

    // Method to withdraw money from the account
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) { // Ensure valid withdrawal amount and sufficient balance
            balance -= amount; // Decrease balance by the withdrawal amount
            addTransaction("Withdraw", amount); // Record the withdrawal in the transaction history
            System.out.println("Withdrawal successful!");
        } else {
            System.out.println("Invalid withdrawal amount or insufficient funds!"); // Handle invalid withdrawals
        }
    }

    // Method to transfer money to another account
    public boolean transfer(BankAccount targetAccount, double amount) {
        if (amount > 0 && amount <= balance) { // Ensure valid transfer amount and sufficient balance
            balance -= amount; // Decrease balance by the transfer amount
            targetAccount.deposit(amount); // Deposit the amount into the target account
            addTransaction("Transfer to account #" + targetAccount.getAccountNumber(), amount); // Record the transfer in this account's history
            targetAccount.addTransaction("Transfer from account #" + this.accountNumber, amount); // Record the transfer in the target account's history
            return true;
        } else {
            return false; // Handle invalid transfers
        }
    }

    // Method to add a transaction to the history
    private void addTransaction(String type, double amount) {
        transactions.add(new Transaction(type, amount, balance)); // Create and add a transaction object
    }

    // Method to display the transaction history for the account
    public void showTransactionHistory() {
        System.out.println("Transaction history for account #" + accountNumber + ":");
        for (Transaction t : transactions) {
            System.out.println(t); // Print each transaction
        }
    }
}

// Class representing a transaction
class Transaction {
    private String type; // Type of transaction (Deposit, Withdrawal, Transfer)
    private double amount; // Amount of the transaction
    private double balanceAfterTransaction; // Account balance after the transaction

    // Constructor for Transaction
    public Transaction(String type, double amount, double balanceAfterTransaction) {
        this.type = type;
        this.amount = amount;
        this.balanceAfterTransaction = balanceAfterTransaction;
    }

    // Override the toString method to display the transaction details
    @Override
    public String toString() {
        return type + " of $" + amount + ", Balance after transaction: $" + balanceAfterTransaction;
    }
}

// Class representing a user
class User {
    private String name; // User's name
    private String email; // User's email
    private ArrayList<BankAccount> accounts; // List of bank accounts owned by the user

    // Constructor for User
    public User(String name, String email) {
        this.name = name;
        this.email = email;
        this.accounts = new ArrayList<>(); // Initialize the accounts list
    }

    // Getter and setter methods for user details
    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // Method to create a new bank account for the user
    public void createAccount(double initialDeposit) {
        BankAccount newAccount = new BankAccount(initialDeposit); // Create a new bank account
        accounts.add(newAccount); // Add the account to the user's account list
        System.out.println("Account created successfully! Account Number: " + newAccount.getAccountNumber());
    }

    // Method to get a bank account by its account number
    public BankAccount getAccount(int accountNumber) {
        for (BankAccount account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                return account; // Return the account if found
            }
        }
        return null; // Return null if the account is not found
    }

    // Method to display all accounts of the user
    public void showAccounts() {
        System.out.println(name + "'s Accounts:");
        for (BankAccount account : accounts) {
            System.out.println("Account #" + account.getAccountNumber() + " - Balance: $" + account.getBalance());
        }
    }
}

// Main class for the banking system
public class BankingSystem {
    private static ArrayList<User> users = new ArrayList<>(); // List of all users
    private static Scanner scanner = new Scanner(System.in); // Scanner object for user input

    // Main method (entry point)
    public static void main(String[] args) {
        boolean exit = false; // Flag to control the main loop

        while (!exit) {
            System.out.println("\n=== Online Banking System ===");
            System.out.println("1. Create a new user");
            System.out.println("2. Manage existing user");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt(); // Get user's choice
            scanner.nextLine(); // Consume newline

            // Handle user's choice
            switch (choice) {
                case 1:
                    createUser(); // Create a new user
                    break;
                case 2:
                    manageUser(); // Manage an existing user
                    break;
                case 3:
                    exit = true; // Exit the system
                    System.out.println("Thank you for using the Online Banking System.");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    // Method to create a new user
    private static void createUser() {
        System.out.print("Enter your name: ");
        String name = scanner.nextLine();
        System.out.print("Enter your email: ");
        String email = scanner.nextLine();
        User user = new User(name, email); // Create a new user
        users.add(user); // Add the user to the users list
        System.out.println("User created successfully!");
    }

    // Method to find a user by email
    private static User findUser() {
        System.out.print("Enter user email: ");
        String email = scanner.nextLine();
        for (User user : users) {
            if (user.getEmail().equalsIgnoreCase(email)) {
                return user; // Return the user if found
            }
        }
        System.out.println("User not found!");
        return null; // Return null if user not found
    }

    // Method to manage an existing user
    private static void manageUser() {
        User user = findUser(); // Find the user
        if (user != null) {
            boolean back = false;

            // Loop for managing user options
            while (!back) {
                System.out.println("\nWelcome, " + user.getName() + "!");
                System.out.println("1. Create a new bank account");
                System.out.println("2. View accounts");
                System.out.println("3. Deposit funds");
                System.out.println("4. Withdraw funds");
                System.out.println("5. Transfer funds");
                System.out.println("6. View transaction history");
                System.out.println("7. Manage personal information");
                System.out.println("8. Back");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                // Handle user's choice for managing their account
                switch (choice) {
                    case 1:
                        System.out.print("Enter initial deposit amount: ");
                        double initialDeposit = scanner.nextDouble();
                        user.createAccount(initialDeposit); // Create a new bank account
                        break;
                    case 2:
                        user.showAccounts(); // Show user's accounts
                        break;
                    case 3:
                        performDeposit(user); // Deposit funds into an account
                        break;
                    case 4:
                        performWithdrawal(user); // Withdraw funds from an account
                        break;
                    case 5:
                        performTransfer(user); // Transfer funds between accounts
                        break;
                    case 6:
                        viewTransactionHistory(user); // View transaction history of an account
                        break;
                    case 7:
                        managePersonalInfo(user); // Manage personal information (name/email)
                        break;
                    case 8:
                        back = true; // Go back to the main menu
                        break;
                    default:
                        System.out.println("Invalid choice! Please try again.");
                }
            }
        }
    }

    // Helper methods for depositing, withdrawing, transferring, and viewing transactions

    private static void performDeposit(User user) {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        BankAccount account = user.getAccount(accountNumber);

        if (account != null) {
            System.out.print("Enter deposit amount: ");
            double amount = scanner.nextDouble();
            account.deposit(amount); // Perform the deposit
        } else {
            System.out.println("Account not found!");
        }
    }

    private static void performWithdrawal(User user) {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        BankAccount account = user.getAccount(accountNumber);

        if (account != null) {
            System.out.print("Enter withdrawal amount: ");
            double amount = scanner.nextDouble();
            account.withdraw(amount); // Perform the withdrawal
        } else {
            System.out.println("Account not found!");
        }
    }

    private static void performTransfer(User user) {
        System.out.print("Enter your account number: ");
        int fromAccountNumber = scanner.nextInt();
        BankAccount fromAccount = user.getAccount(fromAccountNumber);

        if (fromAccount != null) {
            System.out.print("Enter recipient account number: ");
            int toAccountNumber = scanner.nextInt();

            BankAccount toAccount = null;
            for (User u : users) {
                toAccount = u.getAccount(toAccountNumber);
                if (toAccount != null) break;
            }

            if (toAccount != null) {
                System.out.print("Enter transfer amount: ");
                double amount = scanner.nextDouble();
                if (fromAccount.transfer(toAccount, amount)) {
                    System.out.println("Transfer successful!");
                } else {
                    System.out.println("Transfer failed! Insufficient funds or invalid amount.");
                }
            } else {
                System.out.println("Recipient account not found!");
            }
        } else {
            System.out.println("Your account not found!");
        }
    }

    private static void viewTransactionHistory(User user) {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        BankAccount account = user.getAccount(accountNumber);

        if (account != null) {
            account.showTransactionHistory(); // Display the transaction history
        } else {
            System.out.println("Account not found!");
        }
    }

    private static void managePersonalInfo(User user) {
        System.out.println("1. Change name");
        System.out.println("2. Change email");
        System.out.print("Enter your choice: ");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        switch (choice) {
            case 1:
                System.out.print("Enter new name: ");
                String newName = scanner.nextLine();
                user.setName(newName); // Update user's name
                System.out.println("Name updated successfully!");
                break;
            case 2:
                System.out.print("Enter new email: ");
                String newEmail = scanner.nextLine();
                user.setEmail(newEmail); // Update user's email
                System.out.println("Email updated successfully!");
                break;
            default:
                System.out.println("Invalid choice!");
        }
    }
}
